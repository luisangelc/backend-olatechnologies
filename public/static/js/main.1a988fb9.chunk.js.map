{"version":3,"sources":["api.js","component/MiListaTarea/index.js","component/MiListaTarea/Mi-Lista-Tareas.jsx","App.js","reportWebVitals.js","index.js"],"names":["axios","create","baseURL","timeout","headers","MiListaTareas","props","componentDidMount","getTareas","handleChangeFilter","data","value","onChange","event","target","name","setState","state","postTarea","nombre","API","post","then","res","catch","err","console","warn","a","listaTareas","get","total","sinTerminar","terminadas","Data","Card","fluid","Content","Header","textAlign","sort","b","estatus","map","item","index","objStyle","color","cardBackground","background","taskComplete","textDecoration","style","wordWrap","Meta","margin","Checkbox","e","putTask","_id","checked","label","Popup","trigger","Icon","link","paddingLeft","marginLeft","fontSize","fontFamily","flowing","hoverable","Grid","centered","columns","Column","as","Button","onClick","deleteTarea","id","put","undoTarea","delete","isOpen","this","optionsFilter","text","selected","className","Form","onSubmit","width","Field","Input","type","placeholder","stretched","verticalAlign","Group","inline","primary","Dropdown","defaultValue","selection","options","Label","circular","marginRight","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1a988fb9.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: `http://localhost:3000/api`,\r\n    timeout: 2000,\r\n    headers:{}\r\n});","import MiListaTareas from \"./Mi-Lista-Tareas\";\r\n\r\nexport default MiListaTareas;","import React, { Component } from \"react\";\r\nimport { Card, Header, Form, Input, Icon, Button, Grid, Checkbox, Popup, Label } from \"semantic-ui-react\";\r\nimport API from '../../api';\r\nimport \"../Tool/Style.css\";\r\n\r\nclass MiListaTareas extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            nombre: \"\",\r\n            listaTareas: [],\r\n            isOpen: false,\r\n            total: 0,\r\n            terminadas: 0,\r\n            sinTerminar: 0\r\n        };\r\n    }\r\n\r\n    /* Cargar inicial de listado de tareas */\r\n    componentDidMount = () => {\r\n        this.getTareas();\r\n    };\r\n\r\n    componentWillMount() {\r\n        this.setState({\r\n            optionsFilter: [\r\n                { value:'1', text:'Todas' },\r\n                { value:'2', text:'Terminadas' },\r\n                { value:'3', text:'Sin Terminar' },\r\n            ],\r\n            selected: ['1'],\r\n        });\r\n    }\r\n\r\n    handleChangeFilter = data => {\r\n        this.getTareas(data.value);\r\n    }\r\n\r\n    onChange = event => {\r\n        const { name, value } = event.target;\r\n        this.setState(state => ({\r\n            [name]: value\r\n        }));\r\n    };\r\n\r\n    /**\r\n    * Agregar una nueva tarea \r\n    */\r\n    postTarea = () => {\r\n        if (this.state.nombre) {\r\n            API.post('/nueva-tarea', { nombre: this.state.nombre })\r\n                .then(res => {\r\n                    /* Limpiar el formulario */\r\n                    this.setState({ nombre: \"\" });\r\n                    /* Refresh */\r\n                    this.getTareas();\r\n                })\r\n                .catch(err => {\r\n                    console.warn(err);\r\n                });\r\n        }\r\n    };\r\n\r\n    /* Obtener todas las tareas */\r\n    getTareas = async (value = -1) => {\r\n        let listaTareas = [];\r\n        if (value < 0)\r\n            listaTareas = await API.get('/tareas')\r\n                .then(res => {\r\n                    this.state.total = res.data.total;\r\n                    this.state.sinTerminar = res.data.sinTerminar;\r\n                    this.state.terminadas = res.data.terminadas;\r\n                    return res.data.Data; \r\n                })\r\n                .catch(err => { console.warn(err); });\r\n        else\r\n            listaTareas = await API.get(`/tareas/${value}`)\r\n                .then(res => { \r\n                    this.state.total = res.data.total;\r\n                    this.state.sinTerminar = res.data.sinTerminar;\r\n                    this.state.terminadas = res.data.terminadas;\r\n                    return res.data.Data;\r\n                })\r\n                .catch(err => { console.warn(err); });\r\n        if (!listaTareas) {\r\n            return (\r\n                <Card fluid>\r\n                    <Card.Content>\r\n                        <Card.Header textAlign=\"left\">\r\n                            <div>No se encontraron datos</div>\r\n                        </Card.Header>\r\n                    </Card.Content>\r\n                </Card>\r\n            );\r\n            return !1;\r\n        }\r\n\r\n        if(listaTareas) {\r\n            listaTareas = listaTareas.sort((a, b) => {\r\n                if(a.estatus) return 1;\r\n                else if (b.estatus) return -1;\r\n                return 0;\r\n            });\r\n        }\r\n        this.setState({\r\n            listaTareas: listaTareas.map((item, index) => {\r\n                const objStyle = {\r\n                    color: 'yellow',\r\n                    cardBackground: { background: \"white\" },\r\n                    taskComplete: { textDecoration: \"none\" }\r\n                }\r\n                if(item.estatus) {\r\n                    objStyle.color = \"green\";\r\n                    objStyle.cardBackground.background = \"beige\";\r\n                    objStyle.taskComplete[\"textDecoration\"] = \"line-through\";\r\n                }\r\n                return (\r\n                    <Card key={ index } color={ objStyle.color } fluid style={ objStyle.cardBackground }>\r\n                        <Card.Content>\r\n                            <Card.Header textAlign=\"left\" style={ objStyle.taskComplete }>\r\n                                <div style={{ wordWrap: \"break-word\" }}>{ item.nombre }</div>\r\n                            </Card.Header>\r\n                        </Card.Content>\r\n                        <Card.Meta textAlign=\"left\" style={{ margin: '15px' }} >\r\n                            <Checkbox onChange={(e, data) => this.putTask(item._id, data) } checked={ item.estatus } label={ <label>Completada</label> } />\r\n                            \r\n                            <Popup trigger={ \r\n                                <Icon link name=\"delete\" color=\"red\" style={{ paddingLeft: '10px' }}>\r\n                                    <label style={{color: 'black', marginLeft: '5px', fontSize: '15px', fontFamily: 'sans-serif'}}>Eliminar</label>\r\n                                </Icon> \r\n                            } flowing hoverable>\r\n                                <Grid centered  columns={1}>\r\n                                    <Grid.Column textAlign='center'>\r\n                                        <Header as='h4'>Confirme si, ¿Desea eliminar esta tarea ?</Header>\r\n                                        <Button onClick={() => this.deleteTarea(item._id)}>Eliminar</Button>\r\n                                    </Grid.Column>\r\n                                </Grid>\r\n                            </Popup>\r\n                        </Card.Meta>\r\n                    </Card>\r\n                );\r\n            })\r\n        });\r\n    };\r\n\r\n    /* Actualizar una tarea (se marca como terminada) */\r\n    putTask = (id, data) => {\r\n        API.put(`/tarea/${id}`, { estatus: data.checked })\r\n            .then(res => {\r\n                this.getTareas();\r\n            })\r\n            .catch(err => {\r\n                console.warn(err);\r\n            });\r\n    };\r\n\r\n    /* Deshacer el estatus de la tarea de verdadero a falso */\r\n    undoTarea = index => {};\r\n\r\n    /* Eliminar una tarea de la lista*/\r\n    deleteTarea = id => {\r\n        API.delete(`/tarea/${id}`)\r\n            .then(res => {\r\n                this.getTareas();\r\n            })\r\n            .catch(err => {\r\n                console.warn(err);\r\n            });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <Header as=\"h1\">\r\n                        <div className=\"app-header\">Mi Lista de Tareas</div>{\" \"}\r\n                    </Header>\r\n                </div>\r\n                <div className=\"app-form\">\r\n                    <Form onSubmit={ this.postTarea }>\r\n                        <Grid>\r\n                            <Grid.Column width={8}>\r\n                                <Form.Field>\r\n                                    <Input type=\"text\" name=\"nombre\" onChange={ this.onChange } value={ this.state.nombre } fluid placeholder=\"Agregar una tarea\" />\r\n                                </Form.Field>\r\n                            </Grid.Column>\r\n                            <Grid.Column width={2} stretched verticalAlign=\"middle\">\r\n                                <Form.Group inline className=\"no-margin\">\r\n                                    <Form.Field><Button primary>Guardar</Button></Form.Field>\r\n                                </Form.Group>\r\n                            </Grid.Column>\r\n                            <Grid.Column width={4} className=\"no-margin\">\r\n                                <Form.Dropdown placeholder='Please select' defaultValue={this.state.selected} fluid selection \r\n                                    options={ this.state.optionsFilter }\r\n                                    onChange={(e, data) => this.handleChangeFilter(data) }\r\n                                />\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                        <Grid>\r\n                            <Grid.Column width={6}>\r\n                                <Form.Group inline className=\"no-margin\">\r\n                                    <Label>Total Tareas:</Label>\r\n                                    <Label circular color={'teal'} style={{fontFamily: 'serif', fontSize: '12px', color: 'gray', marginRight: '20px'}}>{this.state.total}</Label>\r\n                                    <Label>Terminadas:</Label>\r\n                                    <Label circular color={'teal'} style={{fontFamily: 'serif', fontSize: '12px', color: 'gray', marginRight: '20px' }}>{this.state.terminadas}</Label>\r\n                                    <Label>Sin Terminar:</Label>\r\n                                    <Label circular color={'teal'} style={{fontFamily: 'serif', fontSize: '12px', color: 'white' }}>{this.state.sinTerminar}</Label>\r\n                                </Form.Group>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Form>\r\n                </div>\r\n                <div>\r\n                    <Card.Group>{ this.state.listaTareas }</Card.Group>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default MiListaTareas;","import React from \"react\";\nimport \"./App.css\";\nimport MyTaskList from \"./component/MiListaTarea/index\";\n\nfunction App() {\n  return (\n    <div>\n      <MyTaskList></MyTaskList>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}